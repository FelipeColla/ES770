/* ***************************************************************** */
/* File name:        display7seg_hal.c                               */
/* File description: This file has a couple of useful functions to   */
/*                   control 7 segments displays from peripheral     */
/*                   board                                           */
/* Author name:      fcpinheiro,lopfrigerio                          */
/* Creation date:    04apr2018                                       */
/* Revision date:    04apr2018                                       */
/* ***************************************************************** */

#include "../KL25Z/es670_peripheral_board.h"
#include "display7seg_hal.h"

/* ************************************************ */
/* Method name:        display7seg_init             */
/* Method description: Initialize the 7seg displays */
/* Input params:       n/a                          */
/* Output params:      n/a                          */
/* ************************************************ */
void display7seg_init(void)
{
    /* un-gate port clock*/
    SIM_SCGC5 |= SIM_SCGC5_PORTC(CGC_CLOCK_ENABLED);

    /* set pins as gpio */
    PORTC_PCR0 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR1 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR2 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR3 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR4 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR5 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR6 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR7 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR13 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR12 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR11 = PORT_PCR_MUX(DISPLAY7SEG_ALT);
    PORTC_PCR10 = PORT_PCR_MUX(DISPLAY7SEG_ALT);

    /* set display pins as digital outputs */
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGA_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGB_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGC_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGD_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGE_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGF_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGG_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_SEGDP_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_D1_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_D2_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_D3_DIR);
    GPIOC_PDDR |= GPIO_PDDR_PDD(DISPLAY7SEG_D4_DIR);


}


/* ************************************************** */
/* Method name:        display7seg_init_clearDisplay  */
/* Method description: set the display segments OFF   */
/* Input params:       n/a                            */
/* Output params:      n/a                            */
/* ************************************************** */
void display7seg_clearDisplay()
{
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGA) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGB) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGC) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGD) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGE) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGF) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGG) );
    GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_SEGDP) );
}

/* ************************************************** */
/* Method name:        display7seg_init_charDecode    */
/* Method description: decode the character to be     */
/*                     written into a ON and OFF      */
/*                     segment						  */
/* Input params:       cDisplayNum = which display    */
/*                     cDisplayMsg = character to be  */
/*                                   written          */
/* Output params:      segStatus = character decoded  */
/*                     to segment ports mapped as     */
/*                     binary vector in order:        */
/*                     a,b,c,d,e,f,g,dp               */
/* ************************************************** */
segment_status_type_e* display7seg_init_charDecode(char cDisplayMsg)
{

	/*                                    a       b       c       d       e       f       g       dp*/
	/*                                    0       1       2       3       4       5       6       7 */
	segment_status_type_e segStatus[8] = {SEG_OFF,SEG_OFF,SEG_OFF,SEG_OFF,SEG_OFF,SEG_OFF,SEG_OFF,SEG_OFF};

	switch(cDisplayMsg)
	{
		case '0': segStatus[0] = SEG_ON;
		          segStatus[1] = SEG_ON;
		          segStatus[2] = SEG_ON;
		          segStatus[3] = SEG_ON;
		          segStatus[4] = SEG_ON;
		          segStatus[5] = SEG_ON;
				  break;

		case '1': segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  break;

		case '2': segStatus[0] = SEG_ON;
				  segStatus[1] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case '3': segStatus[0] = SEG_ON;
		          segStatus[1] = SEG_ON;
		          segStatus[2] = SEG_ON;
		          segStatus[3] = SEG_ON;
		          segStatus[6] = SEG_ON;
				  break;
		case '4': segStatus[1] = SEG_ON;
		          segStatus[2] = SEG_ON;
		          segStatus[5] = SEG_ON;
		          segStatus[6] = SEG_ON;
				  break;

		case '5': segStatus[0] = SEG_ON;
		          segStatus[2] = SEG_ON;
		          segStatus[3] = SEG_ON;
		          segStatus[5] = SEG_ON;
		          segStatus[6] = SEG_ON;
				  break;

		case '6': segStatus[0] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case '7': segStatus[0] = SEG_ON;
				  segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  break;

		case '8': segStatus[0] = SEG_ON;
				  segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case '9': segStatus[0] = SEG_ON;
				  segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case 'a':
		case 'A': segStatus[0] = SEG_ON;
				  segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case 'b':
		case 'B': segStatus[2] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case 'c':
		case 'C': segStatus[0] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  break;

		case 'd':
		case 'D': segStatus[1] = SEG_ON;
				  segStatus[2] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case 'e':
		case 'E': segStatus[0] = SEG_ON;
				  segStatus[3] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;

		case 'f':
		case 'F': segStatus[0] = SEG_ON;
				  segStatus[4] = SEG_ON;
				  segStatus[5] = SEG_ON;
				  segStatus[6] = SEG_ON;
				  break;
	}
	return segStatus;
}

/* ************************************************** */
/* Method name:        display7seg_init_writeDisplay  */
/* Method description: write specified character OFF  */
/* Input params:       cDisplayNum = which display    */
/*                     cDisplayMsg = character to be  */
/*                                   written          */
/* Output params:      n/a                            */
/* ************************************************** */
void display7seg_writeDisplay(char cDisplayNum,char cDisplayMsg)
{
	segment_status_type_e* segStatus = display7seg_init_charDecode(cDisplayMsg);
	int i;
	char cPinNum;

	switch(cDisplayNum)
	{
		case 1: GPIOC_PSOR = GPIO_PSOR_PTSO( (0x01U << DISPLAY7SEG_D1) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D2) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D3) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D4) );
		        break;

		case 2: GPIOC_PSOR = GPIO_PSOR_PTSO( (0x01U << DISPLAY7SEG_D2) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D1) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D3) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D4) );
				break;

		case 3: GPIOC_PSOR = GPIO_PSOR_PTSO( (0x01U << DISPLAY7SEG_D3) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D1) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D2) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D4) );
				break;

		case 4: GPIOC_PSOR = GPIO_PSOR_PTSO( (0x01U << DISPLAY7SEG_D4) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D1) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D2) );
				GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << DISPLAY7SEG_D3) );
				break;
	}

	for (i=0; i<8; i++)
	{
		switch(i)
		{

			case 0: cPinNum =  DISPLAY7SEG_SEGA;
					break;

			case 1: cPinNum =  DISPLAY7SEG_SEGB;
					break;

			case 2: cPinNum =  DISPLAY7SEG_SEGC;
					break;

			case 3: cPinNum =  DISPLAY7SEG_SEGD;
					break;

			case 4: cPinNum =  DISPLAY7SEG_SEGE;
					break;

			case 5: cPinNum =  DISPLAY7SEG_SEGF;
					break;

			case 6: cPinNum =  DISPLAY7SEG_SEGG;
					break;

			case 7: cPinNum =  DISPLAY7SEG_SEGDP;
					break;
		}

		if(segStatus[i] == SEG_ON)
		{
			GPIOC_PSOR = GPIO_PSOR_PTSO( (0x01U << cPinNum) );
		}
		else
		{
			GPIOC_PCOR = GPIO_PCOR_PTCO( (0x01U << cPinNum) );
		}


	}
}

