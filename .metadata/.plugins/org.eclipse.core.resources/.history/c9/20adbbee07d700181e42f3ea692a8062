/* ***************************************************************** */
/* File name:        uiFunctions.c                                   */
/* File description: C code file containing the functions/methods    */
/*                   interfaces for implementing desired             */
/*                   hardware-user interface tasks                   */
/* Author name:      fpinheiro,lfrigerio                             */
/* Creation date:    05abr2018                                       */
/* Revision date:    20jun2018                                       */
/* ***************************************************************** */
#include "fsl_device_registers.h"
#include "../Buzzer/buzzer_hal.h"
#include "../Display7seg/display7seg_hal.h"
#include "uiFunctions.h"
#include "../Util/util.h"
#include "../mcg_hal.h"
#include "../KL25Z/es670_peripheral_board.h"
#include "../Lcd/lcd_hal.h"
#include "../Util/timer_counter.h"
#include "../Serial/serial_hal.h"
#include "../Util/adc.h"

#define COMPUTE_TEMP_TIME 500 /* time to send temperature via serial in miliseconds */

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLeds                                                                 */
/* Method description: turn leds on or off according to status vector                                        */
/* Input params:       lstvLedSt = led status vector                                                         */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLeds(led_status_type_e* lstvLedSt)
{
	int i;

	ledswi_initLedSwitch(4,0);
	for(i=1; i<=4; i++)
	{
		if(LED_ON == lstvLedSt[i])
		{
			ledswi_setLed(i);
		}
		else
		{
			ledswi_clearLed(i);
		}
	}
}

/* ************************************************ */
/* Method name:        uiFunctions_commuteLedsTime  */
/* Method description: LEDs 1 to 4 will commute     */
/*                     their state based on defined */
/*                     time, being odd and even     */
/*                     number LEDs toggled          */
/*                     Note: dynamic defining of    */
/*                     port direction is not        */
/*                     currently allowed after this */
/*                     function                     */
/* Input params:       timeFactor = commuting time  */
/*                     factor                       */
/*                     baseDelay*timeFactor         */
/*                     <= commuteTime               */
/* Output params:      n/a                          */
/* ************************************************ */
void uiFunctions_commuteLedsTime(int timeFactor)
{
	/* counts cycle numbers after last commuting */
	static char cCount = 0;
	
	/* 0: odd LEDs ON; 1: even LEDs ON */
	static char cLedStatus = 0; 
	
	/* sets all 4 pins as LEDs */
	ledswi_initLedSwitch(4,0);

	if(cCount == timeFactor)
	{
		if(cLedStatus == 0)
		{
			ledswi_setLed(1);
			ledswi_setLed(3);
			ledswi_clearLed(2);
			ledswi_clearLed(4);
		}
		else
		{
			ledswi_setLed(2);
			ledswi_setLed(4);
			ledswi_clearLed(1);
			ledswi_clearLed(3);
		}
		cCount = 0;
		cLedStatus = !cLedStatus;
	} /* if(cCount == timeFactor - 1) */
	else
	{
		cCount++;
	}
}

/* ************************************************ */
/* Method name:        uiFunctions_writeWord        */
/* Method description: write 4 specified characters */
/*                     to the 4 7seg displays using */
/*                     time multiplexing            */
/* Input params:       cDisplayChar1 = character to */
/*                     be written on D1             */
/*                     cDisplayChar2 = character to */
/*                     be written on D2             */
/*                     cDisplayChar3 = character to */
/*                     be written on D3             */
/*                     cDisplayChar4 = character to */
/*                     be written on D4             */
/* Output params:      n/a                          */
/* ************************************************ */
void uiFunctions_writeWord(char cDisplayChar1,char cDisplayChar2,char cDisplayChar3,char cDisplayChar4)
{
	/* next display in time multiplexing order */
	static char cDisplayNum = 1;

	switch(cDisplayNum)
	{
		case 1: display7seg_writeDisplay(cDisplayNum,cDisplayChar1);
				cDisplayNum++;
				break;

		case 2: display7seg_writeDisplay(cDisplayNum,cDisplayChar2);
				cDisplayNum++;
				break;

		case 3: display7seg_writeDisplay(cDisplayNum,cDisplayChar3);
				cDisplayNum++;
				break;

		case 4: display7seg_writeDisplay(cDisplayNum,cDisplayChar4);
				cDisplayNum = 1;
				break;
	} /* switch(cDisplayNum) */
}

/* ************************************************************* */
/* Method name:        uiFunctions_writeWord                     */
/* Method description: wait for any of 4 switches to be pressed. */
/*                     When that occurs 4 LEDs are set to blink  */
/*                     while the specified 4 characters word is  */
/*                     written to 7seg displays.                 */
/* Input params:       cvWord = 4 character word to be written   */
/*                     on 7seg displays                          */
/* Output params:      n/a                                       */
/* ************************************************************* */
void uiFunctions_runHelloWorld(char cvWord[])
{
	/* current switch status */
	static switch_status_type_e sstSwi1 = SWITCH_OFF;
	
	/* sets all 4 pins as switches */
	ledswi_initLedSwitch(0,4);
	
	/* check at start if any of the 4 switches is pressed */
	if(sstSwi1 == SWITCH_OFF)
	{
		sstSwi1 = ledswi_getSwitchStatus(1) && ledswi_getSwitchStatus(2) && ledswi_getSwitchStatus(3) && ledswi_getSwitchStatus(4);
	}
	
	/* if any of the buttons has been pressed once before */
	else
	{
		/* sets all 4 pins as LEDs */
		ledswi_initLedSwitch(4,0);
		
		/* write word to 7seg displays */
		uiFunctions_writeWord(cvWord[0],cvWord[1],cvWord[2],cvWord[3]);
		
		/* blink all LEDs at 50 times the base ECC time */
		uiFunctions_commuteLedsTime(50);
		
	}
}

/* ************************************************************* */
/* Method name:        uiFunctions_setBuzTime                    */
/* Method description: set buzzer action time and execute while  */
/*                     that time has not passed yet              */
/* Input params:       iBuzTime = time of action                 */
/*                     pstBuzState = buzzer has been commanded   */
/*                     (=PIN_HIGH) or not (=PIN_LOW)             */
/* Output params:      n/a                                       */
/* ************************************************************* */
void uiFunctions_setBuzTime(int* ipBuzTime,const int iCeeTime)
{
	/* duty cycle defined as 50%, period as CEE time */
	int iCeeMiliSec = iCeeTime/1000;
	int iHighTime = iCeeMiliSec;
	int iBuzPeriod = 2*iCeeMiliSec;

	static int iBuzPeriodCount = 0;
	static int iBuzTimeCount = 0;

	/* buzzer must be active for _ cycles amid set action time */
	if(iBuzTimeCount < *ipBuzTime)
	{
		if(iBuzPeriodCount < iHighTime)
		{
			buzzer_setBuzz();
		}
		else
		{
			buzzer_clearBuzz();
		}

		if(iBuzPeriod < iBuzPeriodCount)
		{
			iBuzPeriodCount = 0;
		}
		else
		{
			iBuzPeriodCount += iCeeMiliSec;
		}

		iBuzTimeCount += iCeeMiliSec;
	} /* if(iBuzTimeCount < iBuzTime) */
	else
	{
		iBuzTimeCount = 0;
		*ipBuzTime = 0;
	}
}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdMsg                                                               */
/* Method description: write 2 rows in LCD at frequency 100 times lesser than ECC                            */
/* Input params:                                                                                             */
/*               cvLcdMsg1 = first row of LCD message                                                        */
/*               cvLcdMsg2 = second row of LCD message                                                       */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdMsg(char cvLcdMsg1[], char cvLcdMsg2[])
{
	static char cCount = 0;

	if(1-1 == cCount)
	{

		// clear LCD
		lcd_sendCommand(CMD_CLEAR);

		// set the cursor line 0, column 1
		lcd_setCursor(0,1);

		// send string
		lcd_writeString(cvLcdMsg1);

		// set the cursor line 1, column 0
		lcd_setCursor(1,0);
		lcd_writeString(cvLcdMsg2);

		cCount = 0;
	}
	else
	{
		cCount++;
	}
}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdVar                                                               */
/* Method description: write a title message and a variable with respective variable, one above another, in  */
/* LCD                                                                                                       */
/* Input params:                                                                                             */
/*               cvLcdMsg1 = first row of LCD message                                                        */
/*               cvVarUnit = string containing unit of variable to be written                                */
/*               iVar      = variable to be written                                                          */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdVar(char cvLcdMsg1[], char cvVarUnit[], int iVar)
{
	static char cCount = 0;

	/* variable assumed to be lesser than 10^5*/
	char cvVar[6] = "     \0";

	if(!cCount)
	{

		// clear LCD
		lcd_sendCommand(CMD_CLEAR);

		// set the cursor line 0, column 0
		lcd_setCursor(0,1);

		// send string
		lcd_writeString(cvLcdMsg1);

		// set the cursor line 1, column 5, print unit
		lcd_setCursor(1,6);
		lcd_writeString(cvVarUnit);

		cCount = 1;
	}
	else
	{
		// set the cursor line 1, column 0, print variable
		lcd_setCursor(1,0);
		uiFunctions_convertNum2Str(iVar,cvVar);
		lcd_writeString(cvVar);
	}
}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdVar2                                                              */
/* Method description: write 2 variables, 1 per row,  in LCD with respective described units                 */
/* Input params:                                                                                             */
/*               cvVarUnit1 = string containing unit of 1st variable to be written                           */
/*               iVar1      = 1st variable to be written                                                     */
/*               cvVarUnit2 = string containing unit of 2nd variable to be written                           */
/*               iVar2      = 2nd variable to be written                                                     */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdVar2(char cvVarUnit1[], int iVar1, char cvVarUnit2[], int iVar2)
{
	static char cCount = 0;

	/* variable assumed to be lesser than 10^5*/
	char cvVar1[6] = "     \0";
	char cvVar2[6] = "     \0";

	if(!cCount)
	{

		/* clear LCD */
		lcd_sendCommand(CMD_CLEAR);

		/* set the cursor line 0, column 6, print unit 1 */
		lcd_setCursor(0,6);
		lcd_writeString(cvVarUnit1);

		// set the cursor line 1, column 6, print unit 2 */
		lcd_setCursor(1,6);
		lcd_writeString(cvVarUnit2);

		cCount = 1;
	}

	/* set the cursor line 0, column 0, print variable 1*/
	lcd_setCursor(0,0);
	uiFunctions_convertNum2Str(iVar1,cvVar1);
	lcd_writeString(cvVar1);

	/* set the cursor line 1, column 0, print variable 2*/
	lcd_setCursor(1,0);
	uiFunctions_convertNum2Str(iVar2,cvVar2);
	lcd_writeString(cvVar2);

}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_convertNum2Str                                                            */
/* Method description: convert integer variable (< 10^5) to printable string                                 */
/* Input params:                                                                                             */
/*               iNum  = integer to be converted                                                             */
/*               cpStr = pointer to string to be written                                                     */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_convertNum2Str(int iNum, char* cpStr)
{
	char cPos = 0; /* counting variable */
	char cDigit;

	/* convert to string */
	if(iNum)
	{
		while(iNum > 0)
		{
			cDigit = '0' + iNum % 10;
			cpStr[5-1 - cPos] = cDigit;
			iNum /= 10;
			cPos++;
		}
	}
	else
	{
		cpStr[4] = '0';
	}

}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_setCoolerSpeedBySwi                                                       */
/* Method description: set cooler fan duty cycle by switch, alternating between 0%, 25%, 50%, 75% and 100%,  */
/*                     respectively                                                                          */
/* Input params:       n/a                                                                                   */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
int uiFunctions_setCoolerSpeedBySwi()
{
	static char cState = 0;
	static char cDuty = 0;

	/* sets all 4 pins as switches */
	ledswi_initLedSwitch(0,4);


	if(SWITCH_ON == ledswi_getSwitchStatus(3))
	{
		cState++;
		if(5 == cState)
		{
			cState = 0;
		}

		switch(cState)
		{
			case 0:
				cDuty = 0;
				timer_setFanDutyCycle(cDuty);
				break;

			case 1:
				cDuty = 25;
				timer_setFanDutyCycle(cDuty);
				break;

			case 2:
				cDuty = 50;
				timer_setFanDutyCycle(cDuty);
				break;

			case 3:
				cDuty = 75;
				timer_setFanDutyCycle(cDuty);
				break;

			case 4:
				cDuty = 100;
				timer_setFanDutyCycle(cDuty);
				break;
		}
	} /* if(SWITCH_ON == ledswi_getSwitchStatus(3)) */

	return cDuty;
}

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_computeAndSendTemp                                                        */
/* Method description: convert and send temperature to host by serial if done and timeout is reached         */
/* Input params:       ipAdcValue = pointer to ADC 8-bit converted value                                     */
/*                     ipTemp     = pointer to converted temperature (in Celsius degrees)                    */
/*                     iCeeTime   = main cycle time in microseconds                                          */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_computeAndSendTemp(int* ipAdcValue, int* ipTemp, const int iCeeTime)
{
	static int iCount = 1;
	int i;
	char cvTemp [5] = "     ";

	/* if timeout is reached */
	if(COMPUTE_TEMP_TIME <= iCount*iCeeTime/1000)
	{
		/* if timeout is reached and conversion is done, compute new ADC value and temperature */
		if(adc_isAdcDone())
		{
			*ipAdcValue = adc_getConvertionValue();
			*ipTemp = adc_convertAdc2Temp(*ipAdcValue);
			adc_initConvertion();
		}

		/* send to host last ready temperature value */

		uiFunctions_convertNum2Str(*ipTemp,cvTemp);
		serial_sendBuffer('T');
		serial_sendBuffer('e');
		serial_sendBuffer('m');
		serial_sendBuffer('p');
		serial_sendBuffer(' ');
		serial_sendBuffer('=');
		for(i=0;i<5;i++)
		{
			serial_sendBuffer(cvTemp[i]);
		}
		serial_sendBuffer('o');
		serial_sendBuffer('C');

		iCount = 1;
	} /* if(COMPUTE_TEMP_TIME <= iCount*iCeeTime/1000) */
	else
	{
		iCount++;
	}

}
