/* *********************************************************************** */
/* File name:        serial_hal.h                                          */
/* File description: This file contains headers of functions for           */
/*                   interpret and return serial protocols                 */
/* Author name:      fcpinheiro,lopfrigerio                                */
/* Creation date:    19apr2018                                             */
/* Revision date:    28jun2018                                             */
/* *********************************************************************** */

#ifndef SOURCES_PROTOCOLO_CMDMACHINE_HAL_H_
#define SOURCES_PROTOCOLO_CMDMACHINE_HAL_H_

#include "../LedSwi/ledswi_hal.h"
#include "../Util/pid.h"

# define NONE_MSG 0
# define CLEAR_LED 0
# define SET_LED 1

/* ********************************************************************************************************* */
/* Method name:        cmdmachine_interpretCmd                                                               */
/* Method description: Interpret command from host for return                                                */
/*                     and execute actions                                                                   */
/* Input params:       cCmd = command char read from buffer                                                  */
/*                     cvInterpMsg =                                                                         */
/*              position 0: ACK (=='a'), ERR (=='e'), NONE_MSG (==0)                                         */
/*              position 1: doLed (=='L'), doSwitch (=='S'), doBuzzer(=='B'), doFan(=='F'), doHeater(=='H'), */
/* 								doKp(=="P"),doKi(=="I"),doKd(=="D"),doFanSpeed(=='V')                        */
/*              position 2: * switch -> selected switch status                                               */
/*                          * LED    -> clrLed (==0), setLed (==1)                                           */
/*                          * buzzer -> most significant digit of buzzer action time (in miliseconds)        */
/*                          * fan -> most significant digit of fan duty cycle (in percentage)                */
/*                          * heater -> most significant digit of heater duty cycle (in percentage)          */
/*                          * controller constant -> most significant digit of controller constant           */
/*                          * fan speed -> most significant digit of speed (in RPS)                          */
/*              position 3: * buzzer -> second most significant digit of buzzer action time (in miliseconds) */
/*                          * doLed -> selected LED (== 1:4)                                                 */
/*                          * fan -> second most significant digit of fan duty cycle (in percentage)         */
/*                          * heater -> second most significant digit of heater duty cycle (in percentage)   */
/*                          * controller constant -> least significant digit of controller constant          */
/*                          * fan speed -> least significant digit of speed (in RPS)                         */
/*              position 4: * buzzer -> least significant digit of buzzer action time (in miliseconds)       */
/*                          * fan -> least significant digit of fan duty cycle (in percentage)               */
/*                          * heater -> least significant digit of heater duty cycle (in percentage)         */
/*                          * controller constant -> digit after dot                                         */
/* Output params: n/a                                                                                        */
/* ********************************************************************************************************* */
void cmdmachine_interpretCmd(char cCmd, char* cvInterpMsg);

/* ********************************************************************************************************* */
/* Method name:        cmdmachine_retCmdReponse                                                              */
/* Method description: Return ACK and ERR messages to host and switch status for suitable case as well as    */
/*                     trigger actions commanded by host                                                     */
/* Input params:       cvRespMsg =                                                                           */
/*              position 0: ACK (=='a'), ERR (=='e'), NONE_MSG (==0)                                         */
/*              position 1: doLed (=='L'), doSwitch (=='S'), doBuzzer(=='B'), doFan(=='F'), doHeater(=='H'), */
/* 								doKp(=="P"),doKi(=="I"),doKd(=="D"),doFanSpeed(=='V')                        */
/*              position 2: * switch -> selected switch status                                               */
/*                          * LED    -> clrLed (==0), setLed (==1)                                           */
/*                          * buzzer -> most significant digit of buzzer action time (in miliseconds)        */
/*                          * fan -> most significant digit of fan duty cycle (in percentage)                */
/*                          * heater -> most significant digit of heater duty cycle (in percentage)          */
/*                          * controller constant -> most significant digit of controller constant           */
/*                          * fan speed -> most significant digit of speed (in RPS)                          */
/*              position 3: * buzzer -> second most significant digit of buzzer action time (in miliseconds) */
/*                          * doLed -> selected LED (== 1:4)                                                 */
/*                          * fan -> second most significant digit of fan duty cycle (in percentage)         */
/*                          * heater -> second most significant digit of heater duty cycle (in percentage)   */
/*                          * controller constant -> least significant digit of controller constant          */
/*                          * fan speed -> least significant digit of speed (in RPS)                         */
/*              position 4: * buzzer -> least significant digit of buzzer action time (in miliseconds)       */
/*                          * fan -> least significant digit of fan duty cycle (in percentage)               */
/*                          * heater -> least significant digit of heater duty cycle (in percentage)         */
/*                          * controller constant -> digit after dot                                         */
/*                     lstpLedSt      = pointer to vector containing current LED status                      */
/*                     ipBuzTime      = pointer to variable containing buzzer action time                    */
/*                     ipFanDcycle    = pointer to variable containing cooler fan duty cycle                 */
/*                     ipHeaterDcycle = pointer to variable containing heater duty cycle                     */
/*                     ipFanSpeed     = pointer to variable containing fan reference speed                   */
/* Output params: n/a                                                                                        */
/* ********************************************************************************************************* */
void cmdmachine_retCmdReponse(char* cvRespMsg, led_status_type_e* lstpLedSt, int* ipBuzTime, int* ipFanDcycle, int* ipHeaterDcycle, int* ipFanSpeed, PID_DATA* pdtPidData);


#endif /* SOURCES_PROTOCOLO_CMDMACHINE_HAL_H_ */
