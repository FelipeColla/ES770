/* ***************************************************************** */
/* File name:        uiFunctions.c                                   */
/* File description: C code file containing the functions/methods    */
/*                   interfaces for implementing desired             */
/*                   hardware-user interface tasks                   */
/* Author name:      fpinheiro,lfrigerio                             */
/* Creation date:    05abr2018                                       */
/* Revision date:    20jun2018                                       */
/* ***************************************************************** */

#ifndef SOURCES_USERINTERFACE_UIFUNCTIONS_H_
#define SOURCES_USERINTERFACE_UIFUNCTIONS_H_

#include "../LedSwi/ledswi_hal.h"

typedef enum
{
	PIN_HIGH,
	PIN_LOW
} pin_state_type_e;

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_convertNum2Str                                                            */
/* Method description: convert integer variable (< 10^5) to printable string                                 */
/* Input params:                                                                                             */
/*               iNum  = integer to be converted                                                             */
/*               cpStr = pointer to string to be written                                                     */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_convertNum2Str(int iNum, char* cpStr);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_setCoolerSpeedBySwi                                                       */
/* Method description: set cooler fan duty cycle by switch, alternating between 0%, 25%, 50%, 75% and 100%,  */
/*                     respectively                                                                          */
/* Input params:       n/a                                                                                   */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
int uiFunctions_setCoolerSpeedBySwi();

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_computeAndSendTemp                                                        */
/* Method description: convert and send temperature to host by serial if done and timeout is reached         */
/* Input params:       ipAdcValue = pointer to ADC 8-bit converted value                                     */
/*                     ipTemp     = pointer to converted temperature (in Celsius degrees)                    */
/*                     iCeeTime   = main cycle time in microseconds                                          */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_computeAndSendTemp(int* ipAdcValue, int* ipTemp, const int iCeeTime);

#endif /* SOURCES_UIFUNCTIONS_H_ */
