/* ***************************************************************** */
/* File name:        uiFunctions.c                                   */
/* File description: C code file containing the functions/methods    */
/*                   interfaces for implementing desired             */
/*                   hardware-user interface tasks                   */
/* Author name:      fpinheiro,lfrigerio                             */
/* Creation date:    05abr2018                                       */
/* Revision date:    20jun2018                                       */
/* ***************************************************************** */

#ifndef SOURCES_USERINTERFACE_UIFUNCTIONS_H_
#define SOURCES_USERINTERFACE_UIFUNCTIONS_H_

#include "../LedSwi/ledswi_hal.h"

typedef enum
{
	PIN_HIGH,
	PIN_LOW
} pin_state_type_e;

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLeds                                                                 */
/* Method description: turn leds on or off according to status vector                                        */
/* Input params:       lstvLedSt = led status vector                                                         */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLeds(led_status_type_e* lstvLedSt);

/* ************************************************ */
/* Method name:        uiFunctions_commuteLedsTime  */
/* Method description: LEDs 1 to 4 will commute     */
/*                     their state based on defined */
/*                     time, being odd and even     */
/*                     number LEDs toggled          */
/*                     Note: dynamic defining of    */
/*                     port direction is not        */
/*                     currently allowed after this */
/*                     function                     */
/* Input params:       timeFactor = commuting time  */
/*                     factor                       */
/*                     baseDelay*timeFactor         */
/*                     <= commuteTime               */
/* Output params:      n/a                          */
/* ************************************************ */
void uiFunctions_commuteLedsTime(int timeFactor);

/* ************************************************ */
/* Method name:        uiFunctions_writeWord        */
/* Method description: write 4 specified characters */
/*                     to the 4 7seg displays using */
/*                     time multiplexing            */
/* Input params:       cDisplayChar1 = character to */
/*                     be written on D1             */
/*                     cDisplayChar2 = character to */
/*                     be written on D2             */
/*                     cDisplayChar3 = character to */
/*                     be written on D3             */
/*                     cDisplayChar4 = character to */
/*                     be written on D4             */
/* Output params:      n/a                          */
/* ************************************************ */
void uiFunctions_writeWord(char cDisplayChar1,char cDisplayChar2,char cDisplayChar3,char cDisplayChar4);

/* ************************************************************* */
/* Method name:        uiFunctions_writeWord                     */
/* Method description: wait for any of 4 switches to be pressed. */
/*                     When that occurs 4 LEDs are set to blink  */
/*                     while the specified 4 characters word is  */
/*                     written to 7seg displays.                 */
/* Input params:       cvWord = 4 character word to be written   */
/*                     on 7seg displays                          */
/* Output params:      n/a                                       */
/* ************************************************************* */
void uiFunctions_runHelloWorld(char cvWord[]);

/* ************************************************************* */
/* Method name:        uiFunctions_setBuzTime                    */
/* Method description: set buzzer action time and execute while  */
/*                     that time has not passed yet              */
/* Input params:       iBuzTime = time of action                 */
/*                     pstBuzState = buzzer has been commanded   */
/*                     (=PIN_HIGH) or not (=PIN_LOW)             */
/* Output params:      n/a                                       */
/* ************************************************************* */
void uiFunctions_setBuzTime(int* ipBuzTime,const int iCeeTime);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdMsg                                                               */
/* Method description: write 2 strings, 1 per row, in LCD                                                    */
/* Input params:                                                                                             */
/*               cvLcdMsg1 = first row of LCD message                                                        */
/*               cvLcdMsg2 = second row of LCD message                                                       */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdMsg(char cvLcdMsg1[], char cvLcdMsg2[]);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdVar                                                               */
/* Method description: write a title message and a variable with respective variable, one above another, in  */
/* LCD                                                                                                       */
/* Input params:                                                                                             */
/*               cvLcdMsg1 = first row of LCD message                                                        */
/*               cvVarUnit = string containing unit of variable to be written                                */
/*               iVar      = variable to be written                                                          */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdVar(char cvLcdMsg1[], char cvVarUnit[], int iVar);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_writeLcdVar2                                                              */
/* Method description: write 2 variables, 1 per row,  in LCD with respective described units                 */
/* Input params:                                                                                             */
/*               cvVarUnit1 = string containing unit of 1st variable to be written                           */
/*               iVar1      = 1st variable to be written                                                     */
/*               cvVarUnit2 = string containing unit of 2nd variable to be written                           */
/*               iVar2      = 2nd variable to be written                                                     */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_writeLcdVar2(char cvVarUnit1[], int iVar1, char cvVarUnit2[], int iVar2);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_convertNum2Str                                                            */
/* Method description: convert integer variable (< 10^5) to printable string                                 */
/* Input params:                                                                                             */
/*               iNum  = integer to be converted                                                             */
/*               cpStr = pointer to string to be written                                                     */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_convertNum2Str(int iNum, char* cpStr);

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_setCoolerSpeedBySwi                                                       */
/* Method description: set cooler fan duty cycle by switch, alternating between 0%, 25%, 50%, 75% and 100%,  */
/*                     respectively                                                                          */
/* Input params:       n/a                                                                                   */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
int uiFunctions_setCoolerSpeedBySwi();

/* ********************************************************************************************************* */
/* Method name:        uiFunctions_computeAndSendTemp                                                        */
/* Method description: convert and send temperature to host by serial if done and timeout is reached         */
/* Input params:       ipAdcValue = pointer to ADC 8-bit converted value                                     */
/*                     ipTemp     = pointer to converted temperature (in Celsius degrees)                    */
/*                     iCeeTime   = main cycle time in microseconds                                          */
/* Output params:      n/a                                                                                   */
/* ********************************************************************************************************* */
void uiFunctions_computeAndSendTemp(int* ipAdcValue, int* ipTemp, const int iCeeTime);

#endif /* SOURCES_UIFUNCTIONS_H_ */
