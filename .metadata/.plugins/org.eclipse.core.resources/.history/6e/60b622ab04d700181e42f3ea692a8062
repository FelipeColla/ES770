/* ***************************************************************** */
/* File name:        adc.h                                           */
/* File description: Header file containing the function/methods     */
/*                   prototypes of adc.c                             */
/* Author name:      fcpinheiro,lopfrigerio                          */
/* Creation date:    07jun2018                                       */
/* Revision date:    20jun2018                                       */
/* ***************************************************************** */

#ifndef UTIL_ADC_H_
#define UTIL_ACD_H_

/* ************************************************** */
/* Method name: 	   adc_initADCModule          */
/* Method description: configure ADC module           */
/* Input params:	   n/a 			      */
/* Outpu params:	   n/a 			      */
/* ************************************************** */
void adc_initADCModule(void);


/* ************************************************** */
/* Method name: 	   adc_initConvertion             */
/* Method description: init a conversion from D to A  */
/* Input params:	   n/a 							  */
/* Outpu params:	   n/a 							  */
/* ************************************************** */
void adc_initConvertion(void);


/* ************************************************** */
/* Method name: 	   adc_isAdcDone                  */
/* Method description: check if conversion is done    */
/* Input params:	   n/a 		                      */
/* Outpu params:	   n/a 			                  */
/* ************************************************** */
int adc_isAdcDone(void);


/* ************************************************** */
/* Method name: 	   adc_getConvertionValue         */
/* Method description: retrieve converted value       */
/* Input params:	   n/a 			                  */
/* Outpu params:	   n/a 			                  */
/* ************************************************** */
int adc_getConvertionValue(void);

/* ************************************************** */
/* Method name: 	   adc_convertAdc2Temp            */
/* Method description: retrieve temperature           */
/*                     correspondent to ADC           */
/*                     converted value                */
/* Input params:	   iAdc = 8-bit ADC converted     */
/* Outpu params:	   iTemp = temperature in         */
/*                     Celsius degrees                */
/* ************************************************** */
int adc_convertAdc2Temp(int iAdc);

#endif /* UTIL_ADC_H_ */
